## Learn HTML Forms by Building a Registration Form, Completed ##

**You can use HTML forms to collect information from people who visit your webpage.**

**In this course, you'll learn HTML forms by building a signup page. You'll learn how to control what types of data people can type into your form, and some new CSS tools for styling your page.**


The vh unit stands for viewport height, and is relative to 1% of the height of the viewport.
It is time to spruce the project up with some CSS. Begin by giving the body a width of 100%, and a height of 100vh.

Now, get rid of the horizontal scroll-bar, by setting the body default margin added by some browsers to 0.

That is better. Now, make the background easy on the eyes, by changing the body background-color to #1b1b32. Then, to see the text, change the color to #f5f6f7.

As suggested by the title, you are creating a form. So, after the p element, insert a form with an action attribute targeting https://register-demo.freecodecamp.org.
Give the form an action attribute.

The method attribute specifies how to send form-data to the URL specified in the action attribute. The form-data can be sent via a GET request as URL parameters (with method="get") or via a POST request as data in the request body (with method="post").
Set the method attribute to send your form data via a POST request.

As the form will have three distinct sections, add three fieldset elements within the form element.

The first fieldset will hold name, email, and password fields. Start by adding four label elements to the first fieldset.

The rem unit stands for root em, and is relative to the font size of the html element.
As label elements are inline by default, they are all displayed side by side on the same line, making their text hard to read. To make them appear on separate lines, add display: block to the label element, and add a margin of 0.5rem 0, to separate them from each other.

Nest an input element within each label. Be sure to add each input after the label text, and include a space after the colon.

Following accessibility best practices, link the input elements and the label elements together using the for attribute.
<label> will take for attribute and 
<input> will take id attribute

Specifying the type attribute of a form element is important for the browser to know what kind of data it should expect. If the type is not specified, the browser will default to text.
The email type only allows emails with a @ and a . in the domain. The password type obscures the input, and warns if the site does not use HTTPS.

The first input element with a type of submit is automatically set to submit its nearest parent form element.
To handle the form submission, after the last fieldset element add an input element with the type attribute set to submit and the value attribute set to Submit.

At this point, you should be able to submit the form. However, you might notice not much happens.
To make the form more interactive, add the required attribute to the input elements in the first fieldset.
Now, if you try to submit the form without filling in the required fields, you will see an error message.

Certain type attribute values come with built-in form validation. For example, type="email" requires that the value be a valid email address.
Add custom validation to the password input element, by adding a minlength attribute with a value of 8. Doing so prevents inputs of less than 8 characters being submitted.

With type="password" you can use the pattern attribute to define a regular expression that the password must match to be considered valid.
Add a pattern attribute to the password input element to require the input match: [a-z0-5]{8,}
The above is a regular expression which matches eight or more lowercase letters or the digits 0 to 5.
Then, remove the minlength attribute, and try it out.

Let us go to the next part of the registration form. This section will ask for the type of account the user is opening.

You only want one radio input to be selectable at a time. However, the form does not know the radio inputs are related.
To relate the radio inputs, give them the same name attribute with a value of account-type. Now, it is not possible to select both radio inputs at the same time.

Currently when someone submit the form, they can submit it without checking the radio inputs. Although you had used required attribute to indicate the the input is required previously, this can't work in this case, because adding required to both inputs, will convey the wrong information to the form users.
To solve this, you can provide context of what is needed by adding a legend element with text Account type (required) before the label elements within the second fieldset. Then add the checked attribute to the Personal input to ensure the form is submitted with the required data in it.

Follow accessibility best practices by linking the input elements and the label elements in the second fieldset.
label: for; input:id

What if you wanted to allow a user to upload a profile picture?
Well, the input type "file" allows just that.

Input your age (years): . Then, nest an input with the type of number.
Next, add a min attribute to the input with a value of 13 because users under the age of 13 should not register. Also, users probably will not be over the age of 120; add a max attribute with a value of 120.
Now, if someone tries to submit the form with values outside of the range, a warning will appear, and the form will not submit. Give it a try.

Adding a dropdown to the form is easy with the select element. The select element is a container for a group of option elements, and the option element acts as a label for each dropdown option. Both elements require closing tags.

Submitting the form with an option selected would not send a useful value to the server. As such, each option needs to be given a value attribute. Without which, the text content of the option will be submitted to the server.

The textarea element acts like an input element of type text, but comes with the added benefit of being able to receive multi-line text, and an initial number of text rows and columns.
Users will be able to register with a bio. 

The textarea appears too small. To give it an initial size, you can add the rows and cols attributes.

To give Campers an idea of what to put in their bio, the placeholder attribute is used. The placeholder accepts a text value, which is displayed until the user starts typing.

With form submissions, it is useful, and good practice, to provide each submittable element with a name attribute. This attribute is used to identify the element in the form submission.

Center the h1 and p elements by giving them a margin of 1em auto. Then, align their text in the center as well.

Center the form element, by giving it a margin of 0 auto. Then, fix its size to a maximum width of 500px, and a minimum width of 300px. In between that range, allow it to have a width of 60vw.

During development, it is useful to see the fieldset default borders. However, they make the content appear too separated.
Remove the border, and add 2rem of padding only to the top and bottom of each fieldset. Be sure to remove the padding from the left and right.

To give the fieldset elements a bit of separation, select them and give them a border-bottom of 3px solid #3b3b4f.

The border of the last fieldset element looks a little out of place. You can select the last element of a specific type using the last-of-type CSS pseudo-class, like this:
p:last-of-type { }
That will select the last p element.

If you look close enough, you will notice the .inline elements are too high on the line.
To combat this, set the vertical-align property to middle.

To style the submit button, you can use an attribute selector, which selects an element based on the given attribute value. Here is an example:
input[name="password"]
The above selects input elements with a name attribute value of password.
To style the submit button
input[type="submit"] {
  display: block;
  width: 60%;
}

With a display of block the submit button sits flush against the left edge of its parent.
Use the same technique used to center the form to center the submit button.
You should give the submit button a margin of 0 auto.

To make the submit button appear more distinct, give it a background-color of #3b3b4f, and a border-color of white.

Lastly, for the submit button, you want to separate it from the fieldset above, and adjust its width to never be below 300px.
You should not change the width property. Use the min-width property.

Most browsers inject their own default CSS properties and values for different elements. If you look closely, you might be able to notice the file input is smaller than the other text input elements. **By default, a padding of 1px 2px is given to input elements you can type in**.
Using another attribute selector, style the input with a type of file to be the same padding as the other input elements.

Speaking of padding, the submit button is sitting at the bottom of the form element. Add 2em of padding only to the bottom of the form.



